import numpy as np
from sympy import symbols, Poly, solve

def get_polynomial_expr(coeffs, s):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∏–Ω–æ–º–∞"""
    return sum(c * s**i for i, c in enumerate(reversed(coeffs)))

def calculate_pid(num, den, desired_poly_coeffs):
    s = symbols('s')
    p2, p1, p0, l2, l1, l0 = symbols('p2 p1 p0 l2 l1 l0')

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç–Ω—É—é –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    G_num = get_polynomial_expr(num, s)
    G_den = get_polynomial_expr(den, s)

    # –†–µ–∂–∏–º —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞: kd*s^2 + kp*s + ki
    R_num = Poly(p2*s**2+p1*s+p0, s)
    R_gen = Poly(l2*s**2+l1*s+l0, s)

    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª–∏–Ω–æ–º: A(s)*R(s) + B(s)
    A = Poly(G_den, s)
    B = Poly(G_num, s)
    desired_poly = Poly(get_polynomial_expr(desired_poly_coeffs, s), s)

    char_eq = Poly(A*R_gen + B*R_num, s)
    char_coeffs = char_eq.all_coeffs()
    desired_coeffs = desired_poly.all_coeffs()

    # –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–ª—è–º–∏, –µ—Å–ª–∏ —Å—Ç–µ–ø–µ–Ω–∏ —Ä–∞–∑–Ω—ã–µ
    max_len = max(len(char_coeffs), len(desired_coeffs))
    char_coeffs = [c.expand() for c in ([0]*(max_len - len(char_coeffs)) + char_coeffs)]
    desired_coeffs = [0]*(max_len - len(desired_coeffs)) + desired_coeffs

    # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏—è
    equations = [char - des for char, des in zip(char_coeffs, desired_coeffs)]

    # –†–µ—à–∞–µ–º
    solution = solve(equations, (p2, p1, p0, l2, l1, l0))
    
    l0_default = 0
    solution_substituted = {k: v.subs(l0, l0_default) for k, v in solution.items()}

    return solution_substituted


def main():
    from sympy import symbols
    s = symbols('s')

    print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    print("–§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–∏—Ç–µ–ª—å –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: 1 3 2 / 1 2 1")
    tf_input = input("TF: ").strip()

    try:
        num_str, den_str = tf_input.split('/')
        num = list(map(float, num_str.strip().split()))
        den = list(map(float, den_str.strip().split()))
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", e)
        return

    print("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª–∏–Ω–æ–º (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä).")
    print("–ü—Ä–∏–º–µ—Ä: 2.5 4 2.5 1 (—ç—Ç–æ 2.5s^3 + 4s^2 + 2.5s + 1)")
    try:
        desired_input = input("–ñ–µ–ª–∞–µ–º—ã–π –ø–æ–ª–∏–Ω–æ–º: ").strip()
        desired_poly = list(map(float, desired_input.strip().split()))
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª–∏–Ω–æ–º–∞:", e)
        return

    result = calculate_pid(num, den, desired_poly)

    print("\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞:")
    print(result)
    p2 = result.get(symbols('p2'), 0)
    p1 = result.get(symbols('p1'), 0)
    p0 = result.get(symbols('p0'), 0)
    l2 = result.get(symbols('l2'), 0)
    l1 = result.get(symbols('l1'), 0)
    l0 = result.get(symbols('l0'), 0)

    print(f"kd = {(p1*l1**2-p1*l1*l2+p0*l2**2)/(l1**3)}")
    print(f"kp = {(p1*l1-p0*l2)/(l1**2)}")
    print(f"ki = {p0/l1}")


if __name__ == "__main__":
    main()

# 4 / 43.94 54.08 16.9 1
# 1 15 90 270 405 243