import numpy as np
from math import atan2, pi, cos, sin, degrees
from sympy import symbols

def main():
    print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:")
    print("–ü—Ä–∏–º–µ—Ä: 3 / 1 5 6 0 (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ 3 / (s*(s+2)*(s+3)))")
    tf_input = input("TF: ").strip()

    try:
        num_str, den_str = tf_input.split('/')
        num = list(map(float, num_str.strip().split()))
        den = list(map(float, den_str.strip().split()))
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", e)
        return

    try:
        sigma = float(input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ œÉ: "))
        k_s = float(input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ K(œÉ): "))
        delta_phi_deg = float(input("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∑–æ–≤—ã–π –∑–∞–ø–∞—Å ŒîœÜ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö): "))
        t_reg = float(input("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): "))
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", e)
        return

    wc =  k_s*pi/t_reg
    print(f"\nüîç –ß–∞—Å—Ç–æ—Ç–∞ —Å—Ä–µ–∑–∞ œâc: {wc:.4f} —Ä–∞–¥/—Å")
    
    w = symbols('w')

    jw = complex(0, wc)
    W_jw = np.polyval(num, jw) / np.polyval(den, jw)

    mod_W = abs(W_jw)
    arg_W = atan2(W_jw.imag, W_jw.real)
    arg_W_deg = degrees(arg_W)

    print(f"|W(jœâc)| = {mod_W:.4f}")
    print(f"arg(W(jœâc)) = {arg_W_deg:.2f}¬∞")

    beta_deg = -180 + delta_phi_deg + arg_W_deg   # —É –º–µ–Ω—è —Ñ–∞–∑–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —è –ø–æ—Å—Ç–∞–≤–∏–ª —Å—Ä–∞–∑—É +
    beta_rad = beta_deg * pi / 180

    print(f"\nüìê –¢—Ä–µ–±—É–µ–º–∞—è —Ñ–∞–∑–∞ K(jœâc): {beta_deg:.2f}¬∞")
    
    kf = 0.3          # K–∏ = 0.1...0.3K–¥

    Kp = cos(beta_rad)/mod_W
    Kd = (sin(beta_rad)/mod_W)/(wc - (kf / wc))  
    Ki = kf*Kd

    print("\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞:")
    print(f"Kp = {Kp:.4f}")
    print(f"Ki = {Ki:.4f}")
    print(f"Kd = {Kd:.4f}")

if __name__ == "__main__":
    main()

#4 / 1 6 11 6
# 20
# 2.2
# 50
# 5

# 4 / 43.94 54.08 16.9 1
# 25
# 2.5
# 40
# 0.65